package latencyinteractionexperiment;

import java.util.ArrayList;

import maxvideo.MaxVideoKernel;
import types.FragmentInput;
import types.fRGBA;
import types.uRGB;
import types.uRGBA;

import com.maxeler.maxcompiler.v0.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;

import displaystandards.DisplayStandard;
import functions.ColourFunctions;

class LatencyInteractionExperimentKernel extends MaxVideoKernel {

	protected LatencyInteractionExperimentKernel(KernelParameters parameters) {
		super(parameters, DisplayStandard.make_1280x1024x75());
	}

	@Override
	public uRGB ComputePixelColour(FragmentInput input) {
		// TODO Auto-generated method stub

		Plane background = new Plane("plane_0", Display, input);

		io.output("start_of_frame", dfeBool(), input.m_start_of_frame) <== input.m_start_of_frame;

		uRGB background_colour = new uRGB(background.getColour());

		ArrayList<Sprite> spriteList = new ArrayList<Sprite>();

		spriteList.add(new Sprite("sprite_0", 256, 256));
		spriteList.add(new Sprite("sprite_1", 256, 256));
		spriteList.add(new Sprite("sprite_2", 256, 256));

		for(Sprite s : spriteList){
			fRGBA sc = s.getColour(input, this);
			background_colour = new uRGB(ColourFunctions.Blend(sc, new fRGBA(background_colour)));
		}

		return background_colour;
	}

	public class Plane
	{
		public Plane(String name, DisplayStandard display, FragmentInput input)
		{
			NonBlockingInput<DFEStruct> content =
				io.nonBlockingInput(name + "_content", uRGBA.getDFEStructType(), constant.var(true), 1, DelimiterMode.FRAME_LENGTH, 0, NonBlockingMode.NO_TRICKLING);
			m_colourdata = content.data;
		}

		private final DFEStruct m_colourdata; //without data.valid this will be nonsense sometimes, but we will have a max under-run of 96 pixels, which will be off screen anyway

		fRGBA getColour()
		{
			return new fRGBA(m_colourdata);
		}

	}

	public class Sprite
	{
		public class spritePropertiesStructType extends DFEStructType	{
			public spritePropertiesStructType()	{
				super(sft("x",dfeUInt(32)),
					  sft("y",dfeUInt(32)),
					  sft("R",dfeUInt(8)),
					  sft("G",dfeUInt(8)),
					  sft("B",dfeUInt(8)),
					  sft("A",dfeUInt(8)),
					  sft("padding",dfeUInt(32)));
			}
		}

		private final int m_width;
		private final int m_height;
		private final Memory<DFEStruct> m_spriteContent;
		private final DFEStruct m_properties;

		Sprite(String name, int width, int height)
		{
			this.m_width = width;
			this.m_height = height;
			m_spriteContent = mem.alloc(uRGB.getDFEStructType(), width * height );

			NonBlockingInput<DFEStruct> positions =
				io.nonBlockingInput(name + "_positions", new spritePropertiesStructType(), constant.var(true),
						1, DelimiterMode.FRAME_LENGTH, 0, NonBlockingMode.NO_TRICKLING);
			m_properties = Reductions.streamHold(positions.data, positions.valid);


			NonBlockingInput<DFEStruct> content =
				io.nonBlockingInput(name + "_content", uRGBA.getDFEStructType(), constant.var(true), 1, DelimiterMode.FRAME_LENGTH, 0, NonBlockingMode.NO_TRICKLING);

			CounterChain pc = control.count.makeCounterChain(content.valid);
			DFEVar writeAddress = pc.addCounter(m_width * m_height, 1);

			uRGB casted_colour = new uRGB(content.data);

			m_spriteContent.write(writeAddress - 1, casted_colour.getDFEStruct(), content.valid);

		}

		fRGBA getColour(FragmentInput input, LatencyInteractionExperimentKernel kernel)
		{
			DFEVar x = m_properties["x"];
			DFEVar y = m_properties["y"];
			DFEVar x_offset = input.m_x.cast(dfeUInt(32)) - x;
			DFEVar y_offset = input.m_y.cast(dfeUInt(32)) + y;
			DFEVar readAddress = ((y_offset * m_width) + x_offset).cast(dfeUInt(MathUtils.bitsToAddress(m_width * m_height)));

			DFEVar isValid = (x_offset >= 0) & (x_offset < m_width) & (y_offset >= 0) & (y_offset < m_height);
			DFEStruct colour = isValid.cast(dfeBool()) ?  m_spriteContent.read(readAddress) : uRGB.Black(kernel).getDFEStruct();

			uRGB masked_colour = new uRGB(colour);
			DFEStruct expanded_colour = masked_colour.Equals(uRGB.Black(kernel)) ? fRGBA.Transparent(kernel).getDFEStruct() : new fRGBA(masked_colour).getDFEStruct();

			return ColourFunctions.Multiply(new fRGBA(expanded_colour), new fRGBA(m_properties));
		}

	}


}

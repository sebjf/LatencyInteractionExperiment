package latencyinteractionexperiment;

import java.util.ArrayList;

import maxvideo.MaxVideoKernel;
import types.RGBA32Type;
import types.fRGBA;
import types.uRGB;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFix;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;

import displaystandards.DisplayStandard;
import functions.ColourFunctions;

class LatencyInteractionExperimentKernel extends MaxVideoKernel {

	protected LatencyInteractionExperimentKernel(KernelParameters parameters) {
		super(parameters, DisplayStandard.make_1280x1024x75());
	}

	public class positionStructType extends DFEStructType	{
		public positionStructType()	{
			super(sft("x",dfeUInt(32)),
				  sft("y",dfeUInt(32)),
				  sft("padding",dfeUInt(64)));
		}
	}

	protected static final int radius = 50;


	@Override
	public uRGB ComputePixelColour(FragmentInput input) {
		// TODO Auto-generated method stub

		uRGB colour = new uRGB(200, 0, 0, this);

		NonBlockingInput<DFEStruct>  positions =
			io.nonBlockingInput("positions", new positionStructType(), constant.var(true),
					1, DelimiterMode.FRAME_LENGTH, 0, NonBlockingMode.NO_TRICKLING);


		DFEStruct positionData =
			Reductions.streamHold(positions.data, positions.valid);

		DFEVar xp = positionData["x"];
		DFEVar yp = positionData["y"];

		DFEFix TYPE = dfeInt(32);


		ArrayList<Sprite> spriteList = new ArrayList<Sprite>();

		spriteList.add(new Sprite("sprite_0", 256, 256));
		spriteList.add(new Sprite("sprite_1", 256, 256));
		spriteList.add(new Sprite("sprite_2", 256, 256));


		for(Sprite s : spriteList){
			fRGBA sc = s.getColour(input, this);
			colour = new uRGB(ColourFunctions.Blend(sc, new fRGBA(colour)));
		}

		DFEVar isInRadiusX = (KernelMath.abs(xp.cast(TYPE) - input.x.cast(TYPE)) < radius);
		DFEVar isInRadiusY = (KernelMath.abs(yp.cast(TYPE) - input.y.cast(TYPE)) < radius);

		//return (isInRadiusX) ? colour : black;
		return colour;
	}

	public class Sprite
	{
		public class spritePropertiesStructType extends DFEStructType	{
			public spritePropertiesStructType()	{
				super(sft("x",dfeUInt(32)),
					  sft("y",dfeUInt(32)),
					  sft("R",dfeUInt(8)),
					  sft("G",dfeUInt(8)),
					  sft("B",dfeUInt(8)),
					  sft("A",dfeUInt(8)),
					  sft("padding",dfeUInt(32)));
			}
		}

		Sprite(String name, int width, int height)
		{
			this.width = width;
			this.height = height;
			spriteContent = mem.alloc(new RGBA32Type(), width * height );
			spriteContent.mapToCPU(name);

			NonBlockingInput<DFEStruct>  positions =
				io.nonBlockingInput(name + "_positions", new spritePropertiesStructType(), constant.var(true),
						1, DelimiterMode.FRAME_LENGTH, 0, NonBlockingMode.NO_TRICKLING);
			properties = Reductions.streamHold(positions.data, positions.valid);

		}

		private final int width;
		private final int height;
		private final Memory<DFEStruct> spriteContent;
		private final DFEStruct properties;

		fRGBA getColour(FragmentInput input, LatencyInteractionExperimentKernel kernel)
		{
			DFEVar x = properties["x"];
			DFEVar y = properties["y"];
			DFEVar x_offset = input.x.cast(dfeUInt(32)) - x;
			DFEVar y_offset = input.y.cast(dfeUInt(32)) + y;
			DFEVar readAddress = ((y_offset * width) + x_offset).cast(dfeUInt(16));

			DFEVar isValid = (x_offset >= 0) & (x_offset < width) & (y_offset >= 0) & (y_offset < height);
			DFEStruct colour = isValid.cast(dfeBool()) ?  spriteContent.read(readAddress) : (new RGBA32Type()).Transparent(kernel);

			return ColourFunctions.Multiply(new fRGBA(colour), new fRGBA(properties));
		}

	}


}

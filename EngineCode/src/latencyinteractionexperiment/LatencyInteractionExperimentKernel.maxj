package latencyinteractionexperiment;

import java.util.ArrayList;

import maxvideo.MaxVideoKernel;
import types.FragmentInput;
import types.fRGBA;
import types.uRGB;
import types.uRGBA;

import com.maxeler.maxcompiler.v0.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Reductions;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.Counter;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStructType;

import displaystandards.DisplayStandard;
import functions.ColourFunctions;

class LatencyInteractionExperimentKernel extends MaxVideoKernel {

	protected LatencyInteractionExperimentKernel(KernelParameters parameters, DisplayStandard displayparameters) {
		super(parameters, displayparameters);
	}

	@Override
	public uRGB ComputePixelColour(FragmentInput input) {
		// TODO Auto-generated method stub

		Plane background = new Plane("plane_0", Display, input);

		uRGB background_colour = new uRGB(background.getColour());

		ArrayList<Sprite> spriteList = new ArrayList<Sprite>();

		spriteList.add(new Sprite("sprite_0", 256, 256));
		spriteList.add(new Sprite("sprite_1", 256, 256));
		spriteList.add(new Sprite("sprite_2", 256, 256));

		for(Sprite s : spriteList){
			fRGBA sc = s.getColour(input, this);
			background_colour = new uRGB(ColourFunctions.Blend(sc, new fRGBA(background_colour)));
		}

		return background_colour;
	}

	public class Plane
	{
		public Plane(String name, DisplayStandard display, FragmentInput input)
		{
			/*At the start of each line, request the next one so it is ready for reading when we get to it.*/

			DFEVar y_req_enable = (input.m_y >= -1) & (input.m_y < (display.V_Active - 1));
			DFEVar x_req_enable = input.m_x.eq(0);

			io.output("line_number_out",
					(input.m_y + 1).cast(dfeUInt(16)),
					dfeUInt(16),
					(x_req_enable & y_req_enable)); //the dataenable is for Y

			final double line_width = display.H_Active;
			final double pixels_per_burst = 384/4;
			final int pixels_read_per_line = (int)(Math.ceil(line_width/pixels_per_burst) * pixels_per_burst);


			DFEVar start_reading_padding = input.m_x.eq(line_width) & (input.m_y < display.V_Active);

			final int padding = (int)(pixels_read_per_line - line_width);

			Counter padding_counter = control.count.makeCounter(
					control.count.makeParams(MathUtils.bitsToRepresent(display.TotalWidth))
									.withMax(padding)
									.withWrapMode(WrapMode.STOP_AT_MAX)
									.withReset(start_reading_padding));

			DFEVar padding_enable = (padding_counter.getCount() < padding) & (input.m_y > 0);


			DFEVar active_area_enable = (input.m_y >= 0) & (input.m_y < display.V_Active) & (input.m_x >= 0) & (input.m_x < pixels_read_per_line);

			DFEVar read_enable = active_area_enable | padding_enable;

			input.m_x.simWatch("x");
			input.m_y.simWatch("y");
			active_area_enable.simWatch("active");
			padding_enable.simWatch("padding");

			m_colourdata = io.input("line_data_in", uRGBA.getDFEStructType(), read_enable);

		}

		private final DFEStruct m_colourdata;

		fRGBA getColour()
		{
			return new fRGBA(m_colourdata);
		}

	}

	public class Sprite
	{
		public class spritePropertiesStructType extends DFEStructType	{
			public spritePropertiesStructType()	{
				super(sft("x",dfeUInt(32)),
					  sft("y",dfeUInt(32)),
					  sft("R",dfeUInt(8)),
					  sft("G",dfeUInt(8)),
					  sft("B",dfeUInt(8)),
					  sft("A",dfeUInt(8)),
					  sft("padding",dfeUInt(32)));
			}
		}

		private final int m_width;
		private final int m_height;
		private final Memory<DFEStruct> m_spriteContent;
		private final DFEStruct m_properties;

		Sprite(String name, int width, int height)
		{
			this.m_width = width;
			this.m_height = height;
			m_spriteContent = mem.alloc(uRGB.getDFEStructType(), width * height );

			NonBlockingInput<DFEStruct> positions =
				io.nonBlockingInput(name + "_positions", new spritePropertiesStructType(), constant.var(true),
						1, DelimiterMode.FRAME_LENGTH, 0, NonBlockingMode.NO_TRICKLING);
			m_properties = Reductions.streamHold(positions.data, positions.valid);


			NonBlockingInput<DFEStruct> content =
				io.nonBlockingInput(name + "_content", uRGBA.getDFEStructType(), constant.var(true), 1, DelimiterMode.FRAME_LENGTH, 0, NonBlockingMode.NO_TRICKLING);

			CounterChain pc = control.count.makeCounterChain(content.valid);
			DFEVar writeAddress = pc.addCounter(m_width * m_height, 1);

			uRGB casted_colour = new uRGB(content.data);

			m_spriteContent.write(writeAddress - 1, casted_colour.getDFEStruct(), content.valid);

		}

		fRGBA getColour(FragmentInput input, LatencyInteractionExperimentKernel kernel)
		{
			DFEVar x = m_properties["x"];
			DFEVar y = m_properties["y"];
			DFEVar x_offset = input.m_x.cast(dfeUInt(32)) - x;
			DFEVar y_offset = input.m_y.cast(dfeUInt(32)) + y;
			DFEVar readAddress = ((y_offset * m_width) + x_offset).cast(dfeUInt(MathUtils.bitsToAddress(m_width * m_height)));

			DFEVar isValid = (x_offset >= 0) & (x_offset < m_width) & (y_offset >= 0) & (y_offset < m_height);
			DFEStruct colour = isValid.cast(dfeBool()) ?  m_spriteContent.read(readAddress) : uRGB.Black(kernel).getDFEStruct();

			uRGB masked_colour = new uRGB(colour);
			DFEStruct expanded_colour = masked_colour.Equals(uRGB.Black(kernel)) ? fRGBA.Transparent(kernel).getDFEStruct() : new fRGBA(masked_colour).getDFEStruct();

			return ColourFunctions.Multiply(new fRGBA(expanded_colour), new fRGBA(m_properties));
		}

	}


}

package latencyinteractionexperiment;

import maxvideo.MaxVideoManager;

import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.stdlib.MemoryControlGroup.MemoryAccessPattern;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;

public class LatencyInteractionExperimentManager extends MaxVideoManager {

	private static final String m_kernelName = "LatencyInteractionExperimentKernel";

	public LatencyInteractionExperimentManager(LatencyInteractionExperimentEngineParameters engineParameters) {
		super(engineParameters);

		KernelBlock framegenkernel =  addVideoKernel(new LatencyInteractionExperimentKernel(makeKernelParameters(m_kernelName)));

		framegenkernel.getInput("sprite_0_positions") <== addStreamFromCPU("sprite_0_positions");
		framegenkernel.getInput("sprite_1_positions") <== addStreamFromCPU("sprite_1_positions");
		framegenkernel.getInput("sprite_2_positions") <== addStreamFromCPU("sprite_2_positions");

		framegenkernel.getInput("sprite_0_content") <== addStreamFromCPU("sprite_0_content");
		framegenkernel.getInput("sprite_1_content") <== addStreamFromCPU("sprite_1_content");
		framegenkernel.getInput("sprite_2_content") <== addStreamFromCPU("sprite_2_content");

		framegenkernel.getInput("plane_0_content") <== addStreamFromOnCardMemory("plane_0_read", framegenkernel.getOutput("plane_0_commands"));
		addStreamToOnCardMemory("plane_0_write", MemoryAccessPattern.LINEAR_1D) <== addStreamFromCPU("cpu_to_plane_0");

		createSLiCinterface(interfaceDefault());

	}

	public static void main(String[] args) {
		LatencyInteractionExperimentEngineParameters params = new LatencyInteractionExperimentEngineParameters(args);
		LatencyInteractionExperimentManager manager = new LatencyInteractionExperimentManager(params);
		manager.build();
	}

	public static EngineInterface interfaceDefault() {
		EngineInterface engine_interface = new EngineInterface();
		return engine_interface;
	}

}

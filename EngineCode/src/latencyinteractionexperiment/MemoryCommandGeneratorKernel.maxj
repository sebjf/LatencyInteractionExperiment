package latencyinteractionexperiment;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.LMemCommandStream;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.DelimiterMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.IO.NonBlockingMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

import displaystandards.DisplayStandard;


public class MemoryCommandGeneratorKernel extends Kernel {

	protected MemoryCommandGeneratorKernel(KernelParameters parameters, DisplayStandard display) {
		super(parameters);

		flush.disabled();

		NonBlockingInput<DFEVar> line_number =
			io.nonBlockingInput("line_number_in", dfeUInt(16), constant.var(true), 1, DelimiterMode.FRAME_LENGTH, 0, NonBlockingMode.NO_TRICKLING);

		DFEVar frame_offset = io.scalarInput("frame_offset", dfeUInt(32));

		final double burst_size = 384;
		final double pixels_per_burst = burst_size / 4;
		final double line_size = display.H_Active;
		final int bursts_per_line = (int)Math.ceil(line_size/pixels_per_burst);

		DFEVar address = frame_offset.cast(dfeUInt(28)) + (line_number.data * bursts_per_line).cast(dfeUInt(28));

		LMemCommandStream.makeKernelOutput(
				"memory_commands",
				line_number.valid,
				address.cast(dfeUInt(28)),
				constant.var(dfeUInt(8),bursts_per_line),
				constant.var(dfeUInt(7),1),
				constant.var(dfeUInt(4),0),
				constant.var(false));

	}


}
